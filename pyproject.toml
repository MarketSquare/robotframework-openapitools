[project]
name="robotframework-openapitools"
version = "1.0.0b2"
description = "A set of Robot Framework libraries to test APIs for which the OAS is available."
authors = [
    {name = "Robin Mackaij", email = "r.a.mackaij@gmail.com"},
    {name = "Bartlomiej Hirsz", email = "bartek.hirsz@gmail.com"},
    {name = "Mateusz Nojek", email = "matnojek@gmail.com"},
]
maintainers = [
    {name = "Robin Mackaij", email = "r.a.mackaij@gmail.com"},
]
readme =  "./docs/README.md"
license = { file = "LICENSE"}
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Testing :: Acceptance",
    "Framework :: Robot Framework",
]
requires-python = ">=3.10, <4"
dependencies = [
    "robotframework >= 6.0.0, !=7.0.0",
    "robotframework-datadriver >= 1.10.0",
    "requests >= 2.31.0",
    "prance[CLI] >= 23",
    "Faker >= 23.1.0",
    "rstr >= 3.2.0",
    "openapi-core >= 0.19.0",
    "rich_click >= 1.7.0",
    "black >= 24.1.0",
    "Jinja2 >= 3.1.2",
]

[dependency-groups]
dev = [
    "invoke >= 2.2.0",
    "robotframework-stacktrace >= 0.4.0",
    "uvicorn >= 0.27.0",
    "fastapi >= 0.109.0",
    "coverage[toml] >= 7.2.0",
    "robotcode-runner >= 1.0.3",
]
type-checking = [
    "mypy >= 1.14.1",
    "types-requests >= 2.31.0",
    "types-invoke >= 2.0.0.0",
    "pyright >= 1.1.350",
    "robotcode-analyze >= 1.0.3",
]
lint-and-format = [
    "ruff >= 0.9.0",
    "pylint >= 3.3.3",
    "robotframework-robocop >= 5.7.0",
    "robotframework-tidy >= 4.15.0",
]

[project.urls]
homepage = "https://github.com/MarketSquare/robotframework-openapitools"

[project.scripts]
generate-library = 'openapi_libgen.command_line:main'

[tool.poetry]
requires-poetry = ">=2.0"
packages = [
    {include = "OpenApiDriver", from = "src"},
    {include = "OpenApiLibCore", from = "src"},
    {include = "openapi_libgen", from = "src"},
]
include = ["*.libspec", "*.jinja"]

[tool.poetry.group.dev.dependencies]
invoke = ">=2.2.0"
robotframework-stacktrace = ">=0.4.0"
uvicorn = ">=0.27.0"
fastapi = ">=0.109.0"
coverage = {version = ">=7.2.0", extras = ["toml"]}
robotcode-runner = ">=1.0.3"

[tool.poetry.group.lint-and-format.dependencies]
ruff = ">=0.9.0"
pylint = ">=3.3.3"
robotframework-robocop = ">=5.7.0"
robotframework-tidy = ">=4.15.0"

[tool.poetry.group.type-checking.dependencies]
mypy = ">=1.14.1"
pyright = ">=1.1.350"
types-requests = ">=2.31.0"
types-invoke = ">=2.0.0.0"
robotcode-analyze = ">=1.0.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
branch = true
parallel = true
source = ["src/OpenApiDriver", "src/OpenApiLibCore"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abstract"
]

[tool.mypy]
plugins = ["pydantic.mypy"]
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
disallow_untyped_defs = true
strict = true
show_error_codes = true
exclude = []

[[tool.mypy.overrides]]
module = [
    "prance.*",
    "invoke",
    "uvicorn",
    "rstr"
]
ignore_missing_imports = true

[tool.pyright]
include = ["src"]
exclude = []

[tool.ruff]
line-length = 88
src = ["src"]
target-version = "py313"

[tool.ruff.lint]
select = ["F", "C90", "PL", "RUF"]
ignore = ["RUF012"]

[tool.ruff.lint.isort]
known-first-party = ["OpenApiDriver", "OpenApiLibCore"]
known-third-party = []

[tool.ruff.lint.per-file-ignores]
# Explicit re-exports is fine in __init__.py, still a code smell elsewhere.
"__init__.py" = ["F401", "PLC0414"]

[tool.pylint.'MESSAGES CONTROL']
disable = [
    "logging-fstring-interpolation",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-positional-arguments",
    "too-many-return-statements",
    "too-many-statements",
]

[tool.pylint.'FORMAT CHECKER']
max-line-length=140

[tool.pylint.'SIMILARITIES CHECKER']
ignore-imports="yes"
min-similarity-lines=10

[tool.robotidy]
line_length = 120
spacecount = 4

[tool.robocop]
filetypes = [".robot", ".resource"]
configure = [
    "line-too-long:line_length:120",
    "too-long-test-case:max_len:30",
    "too-many-calls-in-test-case:max_calls:25",
]
exclude = [
    "missing-doc-suite",
    "missing-doc-test-case",
    "missing-doc-keyword",
    "too-few-calls-in-test-case",
]