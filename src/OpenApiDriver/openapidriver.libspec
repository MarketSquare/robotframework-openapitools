<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="OpenApiDriver" type="LIBRARY" format="HTML" scope="SUITE" generated="2025-09-11T15:33:34+00:00" specversion="6" source="/workspaces/robotframework-openapitools/src/OpenApiDriver/openapidriver.py" lineno="24">
<version>1.0.0</version>
<doc>The OpenApiDriver library provides the keywords and logic for execution of generated test cases based on an OpenAPI document.

Visit the &lt;a href="./index.html" target="_blank"&gt;OpenApiTools documentation&lt;/a&gt; for an introduction.</doc>
<tags>
</tags>
<inits>
<init name="__init__" lineno="25">
<arguments repr="source: str, origin: str = , base_path: str = , included_paths: Iterable[str] = frozenset(), ignored_paths: Iterable[str] = frozenset(), ignored_responses: Iterable[int] = frozenset(), ignored_testcases: Iterable[tuple[str, str, int]] = frozenset(), response_validation: ValidationLevel = WARN, disable_server_validation: bool = True, mappings_path: str | Path = , invalid_property_default_response: int = 422, default_id_property_name: str = id, faker_locale: str | list[str] = , require_body_for_invalid_url: bool = False, recursion_limit: int = 1, recursion_default: JSON = {}, username: str = , password: str = , security_token: str = , auth: AuthBase | None = None, cert: str | tuple[str, str] = , verify_tls: bool | str = True, extra_headers: Mapping[str, str] = {}, cookies: MutableMapping[str, str] | RequestsCookieJar | None = None, proxies: MutableMapping[str, str] | None = None">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="source: str">
<name>source</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="origin: str = ">
<name>origin</name>
<type name="str" typedoc="string"/>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="base_path: str = ">
<name>base_path</name>
<type name="str" typedoc="string"/>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="included_paths: Iterable[str] = frozenset()">
<name>included_paths</name>
<type name="Iterable">
<type name="str" typedoc="string"/>
</type>
<default>frozenset()</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignored_paths: Iterable[str] = frozenset()">
<name>ignored_paths</name>
<type name="Iterable">
<type name="str" typedoc="string"/>
</type>
<default>frozenset()</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignored_responses: Iterable[int] = frozenset()">
<name>ignored_responses</name>
<type name="Iterable">
<type name="int" typedoc="integer"/>
</type>
<default>frozenset()</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="ignored_testcases: Iterable[tuple[str, str, int]] = frozenset()">
<name>ignored_testcases</name>
<type name="Iterable">
<type name="tuple" typedoc="tuple">
<type name="str" typedoc="string"/>
<type name="str" typedoc="string"/>
<type name="int" typedoc="integer"/>
</type>
</type>
<default>frozenset()</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="response_validation: ValidationLevel = WARN">
<name>response_validation</name>
<type name="ValidationLevel" typedoc="ValidationLevel"/>
<default>WARN</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="disable_server_validation: bool = True">
<name>disable_server_validation</name>
<type name="bool" typedoc="boolean"/>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="mappings_path: str | Path = ">
<name>mappings_path</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="Path" typedoc="Path"/>
</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="invalid_property_default_response: int = 422">
<name>invalid_property_default_response</name>
<type name="int" typedoc="integer"/>
<default>422</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="default_id_property_name: str = id">
<name>default_id_property_name</name>
<type name="str" typedoc="string"/>
<default>id</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="faker_locale: str | list[str] = ">
<name>faker_locale</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="list" typedoc="list">
<type name="str" typedoc="string"/>
</type>
</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="require_body_for_invalid_url: bool = False">
<name>require_body_for_invalid_url</name>
<type name="bool" typedoc="boolean"/>
<default>False</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="recursion_limit: int = 1">
<name>recursion_limit</name>
<type name="int" typedoc="integer"/>
<default>1</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="recursion_default: JSON = {}">
<name>recursion_default</name>
<type name="JSON"/>
<default>{}</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="username: str = ">
<name>username</name>
<type name="str" typedoc="string"/>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="password: str = ">
<name>password</name>
<type name="str" typedoc="string"/>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="security_token: str = ">
<name>security_token</name>
<type name="str" typedoc="string"/>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="auth: AuthBase | None = None">
<name>auth</name>
<type name="Union" union="true">
<type name="AuthBase"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="cert: str | tuple[str, str] = ">
<name>cert</name>
<type name="Union" union="true">
<type name="str" typedoc="string"/>
<type name="tuple" typedoc="tuple">
<type name="str" typedoc="string"/>
<type name="str" typedoc="string"/>
</type>
</type>
<default/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="verify_tls: bool | str = True">
<name>verify_tls</name>
<type name="Union" union="true">
<type name="bool" typedoc="boolean"/>
<type name="str" typedoc="string"/>
</type>
<default>True</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="extra_headers: Mapping[str, str] = {}">
<name>extra_headers</name>
<type name="Mapping" typedoc="dictionary">
<type name="str" typedoc="string"/>
<type name="str" typedoc="string"/>
</type>
<default>{}</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="cookies: MutableMapping[str, str] | RequestsCookieJar | None = None">
<name>cookies</name>
<type name="Union" union="true">
<type name="MutableMapping" typedoc="dictionary">
<type name="str" typedoc="string"/>
<type name="str" typedoc="string"/>
</type>
<type name="RequestsCookieJar" typedoc="dictionary"/>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="proxies: MutableMapping[str, str] | None = None">
<name>proxies</name>
<type name="Union" union="true">
<type name="MutableMapping" typedoc="dictionary">
<type name="str" typedoc="string"/>
<type name="str" typedoc="string"/>
</type>
<type name="None" typedoc="None"/>
</type>
<default>None</default>
</arg>
</arguments>
<doc>&lt;h2&gt;Test case generation and execution&lt;/h2&gt;

&lt;h3&gt;included_paths&lt;/h3&gt;
A list of paths that will be included when generating the test cases.
The &lt;code&gt;*&lt;/code&gt; character can be used at the end of a partial path to include all paths
starting with the partial path (wildcard include).

&lt;h3&gt;ignored_paths&lt;/h3&gt;
A list of paths that will be ignored when generating the test cases.
The &lt;code&gt;*&lt;/code&gt; character can be used at the end of a partial path to ignore all paths
starting with the partial path (wildcard ignore).

&lt;h3&gt;ignored_responses&lt;/h3&gt;
A list of responses that will be ignored when generating the test cases.

&lt;h3&gt;ignored_testcases&lt;/h3&gt;
A list of specific test cases that, if it would be generated, will be ignored.
Specific test cases to ignore must be specified as a &lt;code&gt;tuple&lt;/code&gt; or
&lt;code&gt;list&lt;/code&gt; of &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt; and &lt;code&gt;response&lt;/code&gt;.


&lt;h2&gt;Base parameters&lt;/h2&gt;

&lt;h3&gt;source&lt;/h3&gt;
An absolute path to an openapi.json or openapi.yaml file or an url to such a file.

&lt;h3&gt;origin&lt;/h3&gt;
The server (and port) of the target server. E.g. &lt;code&gt;https://localhost:8000&lt;/code&gt;

&lt;h3&gt;base_path&lt;/h3&gt;
The routing between &lt;code&gt;origin&lt;/code&gt; and the paths as found in the &lt;code&gt;paths&lt;/code&gt;
section in the openapi document.
E.g. &lt;code&gt;/petshop/v2&lt;/code&gt;.

&lt;h2&gt;Test case execution&lt;/h2&gt;

&lt;h3&gt;response_validation&lt;/h3&gt;
By default, a &lt;code&gt;WARN&lt;/code&gt; is logged when the Response received after a Request
does not comply with the schema as defined in the OpenAPI document for the given operation.
The following values are supported:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DISABLED&lt;/code&gt;: All Response validation errors will be ignored&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INFO&lt;/code&gt;: Any Response validation erros will be logged at &lt;code&gt;INFO&lt;/code&gt; level&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WARN&lt;/code&gt;: Any Response validation erros will be logged at &lt;code&gt;WARN&lt;/code&gt; level&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STRICT&lt;/code&gt;: The Test Case will fail on any Response validation errors&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;disable_server_validation&lt;/h3&gt;
If enabled by setting this parameter to &lt;code class="language-robotframework"&gt;${TRUE}&lt;/code&gt;,
the Response validation will also include possible errors for Requests made to a server
address that is not defined in the list of servers in the OpenAPI document.
This generally means that if there is a mismatch, every Test Case will raise this error.
Note that &lt;code&gt;localhost&lt;/code&gt; and &lt;code&gt;127.0.0.1&lt;/code&gt; are not considered the same
by Response validation.

&lt;h2&gt;API-specific configurations&lt;/h2&gt;

&lt;h3&gt;mappings_path&lt;/h3&gt;
See the Advanced Use tab for an in-depth explanation.

&lt;h3&gt;invalid_property_default_response&lt;/h3&gt;
The default response code for requests with a JSON body that does not comply
with the schema.
Example: a value outside the specified range or a string value
for a property defined as integer in the schema.

&lt;h3&gt;default_id_property_name&lt;/h3&gt;
The default name for the property that identifies a resource (i.e. a unique
entity) within the API.
The default value for this property name is &lt;code&gt;id&lt;/code&gt;.
If the target API uses a different name for all the resources within the API,
you can configure it globally using this property.

If different property names are used for the unique identifier for different
types of resources, an &lt;code&gt;ID_MAPPING&lt;/code&gt; can be implemented using the &lt;code&gt;mappings_path&lt;/code&gt;.

&lt;h3&gt;faker_locale&lt;/h3&gt;
A locale string or list of locale strings to pass to the Faker library to be
used in generation of string data for supported format types.

&lt;h3&gt;require_body_for_invalid_url&lt;/h3&gt;
    When a request is made against an invalid url, this usually is because of a "404" request;
    a request for a resource that does not exist. Depending on API implementation, when a
    request with a missing or invalid request body is made on a non-existent resource,
    either a 404 or a 422 or 400 Response is normally returned. If the API being tested
    processes the request body before checking if the requested resource exists, set
    this parameter to True.

&lt;h2&gt;Parsing parameters&lt;/h2&gt;

&lt;h3&gt;recursion_limit&lt;/h3&gt;
The recursion depth to which to fully parse recursive references before the
&lt;code&gt;recursion_default&lt;/code&gt; is used to end the recursion.

&lt;h3&gt;recursion_default&lt;/h3&gt;
The value that is used instead of the referenced schema when the
&lt;code&gt;recursion_limit&lt;/code&gt; has been reached.
The default &lt;code class="language-python"&gt;{}&lt;/code&gt; represents an empty object in JSON.
Depending on schema definitions, this may cause schema validation errors.
If this is the case &lt;code class="language-robotframework"&gt;${NONE}&lt;/code&gt; or an empty list
can be tried as an alternative.

&lt;h2&gt;Security-related parameters&lt;/h2&gt;
&lt;blockquote&gt;&lt;i&gt;Note: these parameters are equivalent to those in the &lt;code&gt;requests&lt;/code&gt; library.&lt;/i&gt;&lt;/blockquote&gt;

&lt;h3&gt;username&lt;/h3&gt;
The username to be used for Basic Authentication.

&lt;h3&gt;password&lt;/h3&gt;
The password to be used for Basic Authentication.

&lt;h3&gt;security_token&lt;/h3&gt;
The token to be used for token based security using the &lt;code&gt;Authorization&lt;/code&gt; header.

&lt;h3&gt;auth&lt;/h3&gt;
A &lt;a href="https://requests.readthedocs.io/en/latest/api/#authentication" target="_blank"&gt;requests &lt;code&gt;AuthBase&lt;/code&gt; instance&lt;/a&gt; to be used for authentication instead of the &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;.

&lt;h3&gt;cert&lt;/h3&gt;
The SSL certificate to use with all requests.
If string: the path to ssl client cert file (&lt;code&gt;.pem&lt;/code&gt;).
If tuple: the &lt;code class="language-python"&gt;("cert", "key")&lt;/code&gt; pair.

&lt;h3&gt;verify_tls&lt;/h3&gt;
Whether or not to verify the TLS / SSL certificate of the server.
If boolean: whether or not to verify the server TLS certificate.
If string: path to a CA bundle to use for verification.

&lt;h3&gt;extra_headers&lt;/h3&gt;
A dictionary with extra / custom headers that will be send with every request.
This parameter can be used to send headers that are not documented in the
openapi document or to provide an API-key.

&lt;h3&gt;cookies&lt;/h3&gt;
A dictionary or
&lt;a href="https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookieJar" target="_blank"&gt;&lt;code&gt;CookieJar&lt;/code&gt; object&lt;/a&gt;
to send with all requests.

&lt;h3&gt;proxies&lt;/h3&gt;
A dictionary of &lt;code&gt;"protocol": "proxy url"&lt;/code&gt; to use for all requests.</doc>
<shortdoc>&lt;h2&gt;Test case generation and execution&lt;/h2&gt;</shortdoc>
</init>
</inits>
<keywords>
<kw name="Test Endpoint" source="/workspaces/robotframework-openapitools/src/OpenApiDriver/openapi_executors.py" lineno="183">
<arguments repr="path: str, method: str, status_code: int">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="path: str">
<name>path</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="method: str">
<name>method</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="status_code: int">
<name>status_code</name>
<type name="int" typedoc="integer"/>
</arg>
</arguments>
<doc>Validate that performing the &lt;span class="name"&gt;method&lt;/span&gt; operation on &lt;a href="#type-Path" class="name"&gt;path&lt;/a&gt; results in a
&lt;span class="name"&gt;status_code&lt;/span&gt; response.

This is the main keyword to be used in the &lt;span class="name"&gt;Test Template&lt;/span&gt; keyword when using
the OpenApiDriver.

The keyword calls other keywords to generate the neccesary data to perform
the desired operation and validate the response against the openapi document.</doc>
<shortdoc>Validate that performing the `method` operation on `path` results in a `status_code` response.</shortdoc>
</kw>
<kw name="Test Forbidden" source="/workspaces/robotframework-openapitools/src/OpenApiDriver/openapi_executors.py" lineno="115">
<arguments repr="path: str, method: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="path: str">
<name>path</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="method: str">
<name>method</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Perform a request for &lt;span class="name"&gt;method&lt;/span&gt; on the &lt;a href="#type-Path" class="name"&gt;path&lt;/a&gt;, with the provided authorization.

This keyword only passes if the response code is 403: Forbidden.

For this keyword to pass, the authorization parameters used to initialize the
library should grant insufficient access rights to the target endpoint.
&gt; Note: No headers or (json) body are send with the request. For security
reasons, the access rights validation should be checked first.</doc>
<shortdoc>Perform a request for `method` on the `path`, with the provided authorization.</shortdoc>
</kw>
<kw name="Test Invalid Url" source="/workspaces/robotframework-openapitools/src/OpenApiDriver/openapi_executors.py" lineno="132">
<arguments repr="path: str, method: str, expected_status_code: int = 404">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="path: str">
<name>path</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="method: str">
<name>method</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="expected_status_code: int = 404">
<name>expected_status_code</name>
<type name="int" typedoc="integer"/>
<default>404</default>
</arg>
</arguments>
<doc>Perform a request for the provided 'path' and 'method' where the url for
the &lt;a href="#type-Path" class="name"&gt;path&lt;/a&gt; is invalidated.

This keyword will be &lt;span class="name"&gt;SKIPPED&lt;/span&gt; if the path contains no parts
that can be invalidated and there is no mapping for a
PathPropertiesConstraint for the &lt;span class="name"&gt;expected_status_code&lt;/span&gt;.

The optional &lt;span class="name"&gt;expected_status_code&lt;/span&gt; parameter (default: 404) can be set to the
expected status code for APIs that do not return a 404 on invalid urls.

&gt; Note: Depending on API design, the url may be validated before or after
validation of headers, query parameters and / or (json) body. By default, no
parameters are send with the request. The &lt;span class="name"&gt;require_body_for_invalid_url&lt;/span&gt;
parameter can be set to &lt;span class="name"&gt;True&lt;/span&gt; if needed.</doc>
<shortdoc>Perform a request for the provided 'path' and 'method' where the url for the `path` is invalidated.</shortdoc>
</kw>
<kw name="Test Unauthorized" source="/workspaces/robotframework-openapitools/src/OpenApiDriver/openapi_executors.py" lineno="94">
<arguments repr="path: str, method: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="path: str">
<name>path</name>
<type name="str" typedoc="string"/>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="method: str">
<name>method</name>
<type name="str" typedoc="string"/>
</arg>
</arguments>
<doc>Perform a request for &lt;span class="name"&gt;method&lt;/span&gt; on the &lt;a href="#type-Path" class="name"&gt;path&lt;/a&gt;, with no authorization.

This keyword only passes if the response code is 401: Unauthorized.

Any authorization parameters used to initialize the library are
ignored for this request.
&gt; Note: No headers or (json) body are send with the request. For security
reasons, the authorization validation should be checked first.</doc>
<shortdoc>Perform a request for `method` on the `path`, with no authorization.</shortdoc>
</kw>
</keywords>
<typedocs>
<type name="boolean" type="Standard">
<doc>&lt;p&gt;Strings &lt;code&gt;TRUE&lt;/code&gt;, &lt;code&gt;YES&lt;/code&gt;, &lt;code&gt;ON&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt; are converted to Boolean &lt;code&gt;True&lt;/code&gt;, the empty string as well as strings &lt;code&gt;FALSE&lt;/code&gt;, &lt;code&gt;NO&lt;/code&gt;, &lt;code&gt;OFF&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; are converted to Boolean &lt;code&gt;False&lt;/code&gt;, and the string &lt;code&gt;NONE&lt;/code&gt; is converted to the Python &lt;code&gt;None&lt;/code&gt; object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.&lt;/p&gt;
&lt;p&gt;Examples: &lt;code&gt;TRUE&lt;/code&gt; (converted to &lt;code&gt;True&lt;/code&gt;), &lt;code&gt;off&lt;/code&gt; (converted to &lt;code&gt;False&lt;/code&gt;), &lt;code&gt;example&lt;/code&gt; (used as-is)&lt;/p&gt;</doc>
<accepts>
<type>string</type>
<type>integer</type>
<type>float</type>
<type>None</type>
</accepts>
<usages>
<usage>__init__</usage>
</usages>
</type>
<type name="dictionary" type="Standard">
<doc>&lt;p&gt;Strings must be Python &lt;a href="https://docs.python.org/library/stdtypes.html#dict"&gt;dictionary&lt;/a&gt; literals. They are converted to actual dictionaries using the &lt;a href="https://docs.python.org/library/ast.html#ast.literal_eval"&gt;ast.literal_eval&lt;/a&gt; function. They can contain any values &lt;code&gt;ast.literal_eval&lt;/code&gt; supports, including dictionaries and other containers.&lt;/p&gt;
&lt;p&gt;If the type has nested types like &lt;code&gt;dict[str, int]&lt;/code&gt;, items are converted to those types automatically. This in new in Robot Framework 6.0.&lt;/p&gt;
&lt;p&gt;Examples: &lt;code&gt;{'a': 1, 'b': 2}&lt;/code&gt;, &lt;code&gt;{'key': 1, 'nested': {'key': 2}}&lt;/code&gt;&lt;/p&gt;</doc>
<accepts>
<type>string</type>
<type>Mapping</type>
</accepts>
<usages>
<usage>__init__</usage>
</usages>
</type>
<type name="integer" type="Standard">
<doc>&lt;p&gt;Conversion is done using Python's &lt;a href="https://docs.python.org/library/functions.html#int"&gt;int&lt;/a&gt; built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, &lt;code&gt;1.0&lt;/code&gt; is accepted and &lt;code&gt;1.1&lt;/code&gt; is not.&lt;/p&gt;
&lt;p&gt;Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with &lt;code&gt;0x&lt;/code&gt;, &lt;code&gt;0o&lt;/code&gt; and &lt;code&gt;0b&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.&lt;/p&gt;
&lt;p&gt;Examples: &lt;code&gt;42&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0b1010&lt;/code&gt;, &lt;code&gt;10 000 000&lt;/code&gt;, &lt;code&gt;0xBAD_C0FFEE&lt;/code&gt;&lt;/p&gt;</doc>
<accepts>
<type>string</type>
<type>float</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Test Endpoint</usage>
<usage>Test Invalid Url</usage>
</usages>
</type>
<type name="list" type="Standard">
<doc>&lt;p&gt;Strings must be Python &lt;a href="https://docs.python.org/library/stdtypes.html#list"&gt;list&lt;/a&gt; literals. They are converted to actual lists using the &lt;a href="https://docs.python.org/library/ast.html#ast.literal_eval"&gt;ast.literal_eval&lt;/a&gt; function. They can contain any values &lt;code&gt;ast.literal_eval&lt;/code&gt; supports, including lists and other containers.&lt;/p&gt;
&lt;p&gt;If the type has nested types like &lt;code&gt;list[int]&lt;/code&gt;, items are converted to those types automatically. This in new in Robot Framework 6.0.&lt;/p&gt;
&lt;p&gt;Examples: &lt;code&gt;['one', 'two']&lt;/code&gt;, &lt;code&gt;[('one', 1), ('two', 2)]&lt;/code&gt;&lt;/p&gt;</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>__init__</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>&lt;p&gt;String &lt;code&gt;NONE&lt;/code&gt; (case-insensitive) is converted to Python &lt;code&gt;None&lt;/code&gt; object. Other values cause an error.&lt;/p&gt;</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>__init__</usage>
</usages>
</type>
<type name="Path" type="Standard">
<doc>&lt;p&gt;Strings are converted &lt;a href="https://docs.python.org/library/pathlib.html"&gt;Path&lt;/a&gt; objects. On Windows &lt;code&gt;/&lt;/code&gt; is converted to &lt;code&gt;\&lt;/code&gt; automatically.&lt;/p&gt;
&lt;p&gt;Examples: &lt;code&gt;/tmp/absolute/path&lt;/code&gt;, &lt;code&gt;relative/path/to/file.ext&lt;/code&gt;, &lt;code&gt;name.txt&lt;/code&gt;&lt;/p&gt;</doc>
<accepts>
<type>string</type>
<type>PurePath</type>
</accepts>
<usages>
<usage>__init__</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>&lt;p&gt;All arguments are converted to Unicode strings.&lt;/p&gt;</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>__init__</usage>
<usage>Test Endpoint</usage>
<usage>Test Forbidden</usage>
<usage>Test Invalid Url</usage>
<usage>Test Unauthorized</usage>
</usages>
</type>
<type name="tuple" type="Standard">
<doc>&lt;p&gt;Strings must be Python &lt;a href="https://docs.python.org/library/stdtypes.html#tuple"&gt;tuple&lt;/a&gt; literals. They are converted to actual tuples using the &lt;a href="https://docs.python.org/library/ast.html#ast.literal_eval"&gt;ast.literal_eval&lt;/a&gt; function. They can contain any values &lt;code&gt;ast.literal_eval&lt;/code&gt; supports, including tuples and other containers.&lt;/p&gt;
&lt;p&gt;If the type has nested types like &lt;code&gt;tuple[str, int, int]&lt;/code&gt;, items are converted to those types automatically. This in new in Robot Framework 6.0.&lt;/p&gt;
&lt;p&gt;Examples: &lt;code&gt;('one', 'two')&lt;/code&gt;, &lt;code&gt;(('one', 1), ('two', 2))&lt;/code&gt;&lt;/p&gt;</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>__init__</usage>
</usages>
</type>
<type name="ValidationLevel" type="Enum">
<doc>The available levels for the response_validation parameter.</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>__init__</usage>
</usages>
<members>
<member name="DISABLED" value="DISABLED"/>
<member name="INFO" value="INFO"/>
<member name="WARN" value="WARN"/>
<member name="STRICT" value="STRICT"/>
</members>
</type>
</typedocs>
</keywordspec>
